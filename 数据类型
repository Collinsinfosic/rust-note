    //变量是可变的，let标识变量，也可以使用mut标识变量
    let mut x= 3;
    println!("the x value is :{}",x);
    x = 11119;
    println!("the x value is :{}",x);

    //常量,使用const标识，标识不可变的固定值，但是常量需要制定对应的类型，是字符还是整型
    //常量名按习惯得用大写字母，不然看着不规范。
    const Y:i64 = 60*60*60*10000;
    println!("the y value is :{}",Y);

    let spaces = "   ";
    let spaces = spaces.len();
    println!("the spaces lenght is:{}",spaces);

    //let mut s1 = "   ";
    //s1 = s1.len();
    //println!("the s1 length is: {}",s1);
    //上面两端代码的区别：spaces是重新声明遍历并覆盖，mut是对原始的变量
    //进行赋值，所以s1.len()会报错，因为原始的s1是str类型，s1.len是数字类型

    //标识整型也可以用下划线来分开，比较有可视性
    let num1 = 98_1000;
    println!("th num1 is :{}",num1);

    //整数类型
    1. 8 位整数
    i8（有符号）：
    范围：-128 到 127
    咋算：8 位能存 2⁸ = 256 个数，一半给负数（-128 到 -1），一半给零和正数（0 到 127）。
    
    u8（无符号）：
    范围：0 到 255
    咋算：8 位全给非负数，2⁸ - 1 = 255（加上 0 是 256 个数）。
    
    2. 16 位整数
    i16（有符号）：
    范围：-32,768 到 32,767
    咋算：16 位是 2¹⁶ = 65,536 个数，负数占一半（-32,768 到 -1），正数加零占一半（0 到 32,767）。
    
    u16（无符号）：
    范围：0 到 65,535
    咋算：16 位全给非负数，2¹⁶ - 1 = 65,535。
    
    3. 32 位整数
    i32（有符号）：
    范围：-2,147,483,648 到 2,147,483,647
    咋算：32 位是 2³² = 4,294,967,296 个数，一半负数（-2³¹），一半零和正数（2³¹ - 1）。
    
    u32（无符号）：
    范围：0 到 4,294,967,295
    咋算：32 位全给非负数，2³² - 1。
    
    4. 64 位整数
    i64（有符号）：
    范围：-9,223,372,036,854,775,808 到 9,223,372,036,854,775,807
    咋算：64 位是 2⁶⁴，负数一半（-2⁶³），正数加零一半（2⁶³ - 1）。
    
    u64（无符号）：
    范围：0 到 18,446,744,073,709,551,615
    咋算：64 位全给非负数，2⁶⁴ - 1。
    
    5. 128 位整数
    i128（有符号）：
    范围：-170,141,183,460,469,231,731,687,303,715,884,105,728 到 170,141,183,460,469,231,731,687,303,715,884,105,727
    咋算：128 位是 2¹²⁸，负数一半（-2¹²⁷），正数加零一半（2¹²⁷ - 1）。
    
    u128（无符号）：
    范围：0 到 340,282,366,920,938,463,463,374,607,431,768,211,455
    咋算：128 位全给非负数，2¹²⁸ - 1。
    
    6. 架构相关的整数（isize 和 usize）
    isize（有符号）和 usize（无符号） 的范围取决于你用的系统是 32 位 还是 64 位：
    32 位系统：
    isize：-2,147,483,648 到 2,147,483,647（跟 i32 一样）。
    usize：0 到 4,294,967,295（跟 u32 一样）。
    
    64 位系统（现在大部分电脑都是这个）：
    isize：-9,223,372,036,854,775,808 到 9,223,372,036,854,775,807（跟 i64 一样）。
    usize：0 到 18,446,744,073,709,551,615（跟 u64 一样）。
    啥意思：isize 和 usize 是“灵活”的，跟你电脑的“字长”挂钩，通常用来表示内存地址或数组索引。
    如果针对不同的系统开发，即使用不同的size即可

    let num_10 = 1_0;
    println!("this is ten  decimal:{}",num_10);//十进制
    let num_16 = 0xa;
    println!("this is ten hex:{}",num_16);//十六进制
    let num_8 = 0o12;
    println!("this is ten octal:{}",num_8);//8进制
    let num_2 = 0b1010;
    println!("this is ten binary:{}",num_2);//2进制
    let num_str = b"10";
    println!("this is ten byte u8 only:{:?}",num_str);//字节类型

    //{}只能打印人看的懂的，对于数组，字符串那种，需要用{:?}来打印，和{}不同的是，他表示debug模式，{:?}：随便啥都能打出来，可能是“程序员格式”（需要 Debug），所以10转换为字节类型是[49, 48]
    //所以{}不知道应该怎么操作，只能用万能的{:?}来打印



    浮点类型
    浮点类型就是小数，带有小数点的，IEEE-754 标准表示


    数值运算
    加减乘除取余
    let sum = 31+2;
    println!("the sum is:{}",sum);
    let sub = 99.99-98.99;
    println!("the sub is :{}",sub);

    let mult = 31.0*10.1;
    println!("the mult is :{}",mult);
    let quot = 57.6/31.1;
    let trun = -6/3;
    println!("the quot is:{}",quot);
    println!("the trun is:{}",trun);

    let rema = 43%5;
    println!("the rema is :{}",rema);

    整数只能与整数做运算，否则会报错
    error[E0277]: cannot add an integer to a float
  --> src/main.rs:39:18
   |
39 |     let sum = 3.1+2;
   |                  ^ no implementation for `{float} + {integer}`
   |
   = help: the trait `Add<{integer}>` is not implemented for `{float}`
   = help: the following other types implement trait `Add<Rhs>`:
             `&f128` implements `Add<f128>`
             `&f128` implements `Add`
             `&f16` implements `Add<f16>`
             `&f16` implements `Add`
             `&f32` implements `Add<f32>`
             `&f32` implements `Add`
             `&f64` implements `Add<f64>`
             `&f64` implements `Add`
           and 56 others

角色类型char
char用单引号指定文字，而不是使用双引号的字符串文字。
Rust 的char类型大小为四个字节，表示 Unicode 标量值，
这意味着它可以表示的不仅仅是 ASCII。重音字母；中文、日文和韩文字符；表情符号；以及零宽度空格都是charRust 中的有效值。
Unicode 标量值的范围从U+0000到U+D7FF并U+E000到U+10FFFF（含）。
但是，“字符”在 Unicode 中并不是一个真正的概念，

复合类型
复合类型包含元组，数组
元组类型
元组是一种将多个具有各种类型的值组合成一种复合类型的通用方法。
元组的长度是固定的：一旦声明，它们的大小就不能增加或缩小。
我们通过在括号内写入逗号分隔的值列表来创建元组。
元组中的每个位置都有一个类型，并且元组中不同值的类型不必相同。
let tup1:(u8,f32,char) = (9,3.99,'😻');
println!("the tup is :{:?}",tup1);

数组类型
另一种拥有多个值集合的方法是使用数组。与元组不同，数组的每个元素必须具有相同的类型。
与其他一些语言中的数组不同，Rust 中的数组具有固定长度。
let a: [i32; 5] = [1, 2, 3, 4, 5];
这里，i32是每个元素的类型。分号后面的数字5 表示该数组包含五个元素。

通过指定初始值，后跟分号，然后在方括号中指定数组的长度，来初始化一个数组，
使其每个元素包含相同的值，如下所示：
let a = [3; 5];
命名的数组a将包含5所有将初始设置为值的元素 3。这与书写相同，let a = [3, 3, 3, 3, 3];
但更简洁。
// 数组的长度是固定的，不能动态改变，如果给的下标超出长度
    //会报错
    let list = [1,2,3,4,5];
    println!("please input the index of the list:");
    let mut index = String::new();

    io::stdin()
        .read_line(&mut index)
        .expect("failed to read line");
    
    let index:usize = index.trim().parse().expect("please type a number");

    let list_member = list[index];
    println!("the value is :{}",list_member);
    
  thread 'main' panicked at src/main.rs:99:23:
  index out of bounds: the len is 5 but the index is 15
  note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

堆栈简单理解
栈：像饭店的盘子架，盘子摞得整整齐齐，拿了上面那个，下面的自动顶上来，超省心。
堆：像个大仓库，啥都能扔进去，但得有个清单（指针），不然找不着。





