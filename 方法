方法
在 Rust 中，我们通过输入后跟函数名和一组括号来定义一个函数fn。
花括号告诉编译器函数体的开始和结束位置。
在方法中也可以传递参数，但是除了main方法以外的方法要调用，只能在main中调用
比如：
fn main() {
    println!("Hello, world!");
    another_function(-1);
}

fn another_function(x:i8){
    println!("the x value is :{}",x);
}

语句和表达式
fn main() {
    let x = (let y = 6);
}
如果将y赋值给x，很明显y不会有任何返回值，所以会报错

如果将表达式修改成：
fn another_function(){
    let y ={
        let x =100;
        x+1;
    };
    println!("the y value is :{:?}",y);
}
仍旧不会有任何返回值，运行结果如下
Hello, world!
the y value is :()

因为在x+1处有个分号，rust会把它当成一个语句，这样就不会返回任何值
所以正确写法需要将分号去掉。

具有返回值的函数
函数可以向调用它们的代码返回值。我们不命名返回值，但我们必须在箭头 ( ->) 后声明它们的类型。
在 Rust 中，函数的返回值与函数主体块中最后一个表达式的值同义
-> 是函数返回值类型的语法标记。它用于指定函数返回的数据类型，也就是说
会返回最后最后一个表达式的值，和表达式一样，最后一个语句不能加分号，否则会报错
带有返回值的函数和正常函数一样，只需要最后返回的值与函数定义的值类型相同即可
比如：
fn five()->i8{
   let a =3;
   let b =5;
   a+b
}
fn cat()->char{
    let a =3;
    let b=100;
    a+b;
    let c= '😀';
    c
}
fn main() {
    println!("Hello, world!");
    // guess_game();
    let x = five();
    let b = cat();
    println!("the x value is :{}",x);
    println!("the b value is :{}",b);
}



